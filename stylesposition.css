  
/* 
Position
Flujo HTML -> Es el orden en el que aparecen los elementos en el documento
Espacio -> Es el espacio que ocupa un elemento en el documento

.title{
    text-align: center;
    font-size: 3em;
}
p{
    font-size: 2em;
}

.parrafo-1{
    display: none;
}
*/
/* 
Position relative
Su punto de referencia (contexto) es el punto donde aparece en el flujo
Al ser un elemento posicionado lo podemos mover en los 3 ejes X Y Z


.box1, .box2{
    width: 250px;
    height: 250px;
    margin: 1em auto;
    font-size: 2.5em;
    text-align: center;
}

.box1{
background: green;
position: relative;
/* top right botton left z-index*/
/* top right bottom left z-index */
    /* z-index: 1; Si declaramos z-index automaticamente se dibuja por encima por tener un valor mayor que el de por defecto (0)*/
    /* top y left tienen preferencia ante bottom y right 
/* top: 100px;
left: 50px;
top: 100px;

}

.box2{
    background: brown;
    position: relative;
}
*/

/* 
Position absolute
El elemento no conserva su espacio en el flujo.
Si no tiene dimensiones declaradas, sus dimensiones se ajustan al contenido.
Su punto de referencia (contexto) es el elemento que lo contenga posicionado más cercano, si no encuentra ninguno será el viewport (el espacio visible en pantalla)
Al ser un elemento posicionado lo podemos mover en los 3 ejes X Y Z

.container{
    width: 300px;
    margin-left: auto;
    margin-right: auto;
    height: 300px;
    border: 3px solid black;
    position: relative;
}

[class^=box]{
    width: 50px;
    height: 50px;
}
.box1{
    border: 4px solid blueviolet;
    position: absolute;
    top: 0;
    left: 0;
}
.box2{
    border: 4px solid blue;
    position: absolute;
    top: 0;
    right: 0;
}
.box3{
    border: 4px solid red;
    position: absolute;
    bottom: 0;
    left: 0;
}
.box4{
    border: 4px solid purple;
    position: absolute;
    bottom: 0;
    right: 0;
}
.box5{
    border: 4px solid greenyellow;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    margin: auto;
}
*/
/* Position fixed
El elemento no conserva su espacio en el flujo.
Si no tiene dimensiones declaradas, sus dimensiones se ajustan al contenido.
Su punto de referencia (contexto) es el viewport (el espacio visible en pantalla)
Al ser un elemento posicionado lo podemos mover en los 3 ejes X Y Z

body{
    padding-top: 6em;
}
.menu{
    background: darkcyan;
    padding: .5em;
    text-align: center;
    font-size: 2em;
    position:fixed;
    top: 0;
    width: 100%;
}

.title{
margin: 0;
}
.text{

}*/
/*Position sticky
El elemento conserva su espacio en el flujo.
Si no tiene dimensiones declaradas, sus dimensiones se ajustan al contenido.
Su punto de referencia (contexto) es el viewport (el espacio visible en pantalla)
Al ser un elemento posicionado lo podemos mover en los 3 ejes X Y Z 
.slide{
    height: 300px;
    background: lawngreen;
    font-size: 3em;
    text-align: center;
    line-height: 6em;
}
.menu{
    background: darkcyan;
    padding: .5em;
    text-align: center;
    font-size: 2em;
    position: sticky;
    top: 0;
}

.title{
margin: 0;
}*/


/*z-index
Nos permite modificar el orden de las capas en el eje z (profundidad)
Admite valores positivos y negativos
Es recomendable usar valores no consecutivos. 100, 200, 300…
Si el padre tiene z-index declarado no podremos poner a un hijo por encima.
.box{
    width: 75px;
    height: 75px;
    font-size: 1.5em;
    line-height: 75px;
    text-align: center;
    position: relative;
}

.box1{
    background: rebeccapurple;
    z-index: 30;
}

.box2{
    background: firebrick;
    top: -38px;
    left: 30px;
    z-index: 20;
}
.box3{
    background: forestgreen;
    top: -75px;
    left: 75px;
    z-index: 10;
}

.box4{
    background: lightblue;
    top: -150px;
    left: 50px;
    z-index: 15;
}

.padre{
    width: 200px;
    height: 200px;
    background: beige;
    position: relative;
    top: 30px;
    
}

.hijo{
    width: 50px;
    height: 50px;
    background: yellow;
    position: relative;
    top: -30px;
    left: 150px;
    z-index: -1;
}*/


/*
Display
-Nos permite definir cómo se comporta una caja.
-De forma natural existen elementos en línea y elementos en bloque
-Los valores de esta propiedad son:
    inline – Establece que la caja se comporta como si fuera un elemento en línea.
        No admite dimensiones (width y height)
        Admiten margin y padding pero no afecta al flujo vertical,sólo al horizontal
    block - Establece que la caja se comporta como si fuera un elemento en bloque.
        Admite dimensiones (width y height)
        Admiten margin y padding y afecta al flujo vertical, sólo al horizontal.
    inline-block - Se comporta como un elemento en línea pero acepta width y heigth
    
    none – Oculta el elemento pero se sigue renderizando
    table – Imita el comportamiento de una tabla
    list-item - Imita el comportamiento de una lista
    CSS3
    flex – maquetar componentes
    grid – maquetar layout
*/
.inline{
    background: forestgreen;
    display: none;
}
.block{
    background: gold;
    margin: 0;
}